import { BaseAIService, type AIResponse } from "@/lib/ai-base"

interface Veo3PromptData {
  jsonPrompt: string
  paragraphPrompt: string
  metadata: {
    model: string
    processingTime: number
  }
}

export class AIService extends BaseAIService {
  async generateVeo3Prompt(userInput: string): Promise<AIResponse> {
    const startTime = Date.now()

    if (!this.hasAIService()) {
      return {
        success: false,
        error: this.getAIServiceError()
      }
    }

    const systemPrompt = `You are an expert Veo3 prompt engineer. Create a video prompt for Google's Veo3 AI video generation.

User Input: ${userInput}

Requirements:
- Duration: 15-60 seconds
- Quality: 4K resolution, 30fps
- Professional cinematic quality
- Optimized for Veo3 AI generation

Provide your response in this exact format:

===JSON FORMAT===
{
  "scene": "detailed scene description",
  "subject": "main subject details",
  "action": "specific actions and movements",
  "camera": "camera angles and movements",
  "lighting": "lighting setup and mood",
  "audio": "sound effects and music",
  "technical": {
    "duration": "15-60 seconds",
    "quality": "4K, 30fps",
    "aspect_ratio": "16:9",
    "style": "cinematic"
  }
}
===END JSON===

===PARAGRAPH FORMAT===
[Write a detailed, cinematic paragraph describing the scene with all visual and audio elements, optimized for Veo3 AI generation.]
===END PARAGRAPH===

Think like a professional cinematographer and director.`

    try {
      const { result, model } = await this.tryWithFallback(systemPrompt)

      console.log("Raw AI Response:", result)

      // Parse JSON and paragraph from response
      const jsonMatch = result.match(/===JSON FORMAT===\s*([\s\S]*?)\s*===END JSON===/)
      const paragraphMatch = result.match(/===PARAGRAPH FORMAT===\s*([\s\S]*?)\s*===END PARAGRAPH===/)

      let jsonPrompt = jsonMatch ? jsonMatch[1].trim() : null
      let paragraphPrompt = paragraphMatch ? paragraphMatch[1].trim() : null

      // Fallback parsing if structured format fails
      if (!jsonPrompt) {
        try {
          const jsonStart = result.indexOf('{')
          const jsonEnd = result.lastIndexOf('}') + 1
          if (jsonStart !== -1 && jsonEnd > jsonStart) {
            const potentialJson = result.substring(jsonStart, jsonEnd)
            JSON.parse(potentialJson)
            jsonPrompt = potentialJson
          }
        } catch (e) {
          // Create basic JSON if parsing fails
          const basicJson = {
            scene: `A cinematic scene featuring ${userInput}`,
            subject: userInput,
            action: userInput,
            camera: "Professional camera work",
            lighting: "Cinematic lighting",
            audio: "Background music",
            technical: {
              duration: "15-60 seconds",
              quality: "4K, 30fps",
              aspect_ratio: "16:9",
              style: "cinematic"
            }
          }
          jsonPrompt = JSON.stringify(basicJson, null, 2)
        }
      }

      if (!paragraphPrompt) {
        paragraphPrompt = result || `Create a cinematic video scene featuring ${userInput}. The scene should depict ${userInput} with professional camera work, cinematic lighting, and appropriate background music. The video should be 15-60 seconds in duration, shot in 4K resolution at 30fps, with a 16:9 aspect ratio and cinematic style.`
      }

      const processingTime = Date.now() - startTime

      return {
        success: true,
        data: {
          jsonPrompt,
          paragraphPrompt,
          metadata: {
            model,
            processingTime
          }
        }
      }

    } catch (error) {
      console.error("AI service error:", error)
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      }
    }
  }
}

export const aiService = new AIService()

